#! /usr/bin/env python3

# (c) Andrei Nigmatulin, 2019

import os
import sys
import glob
import tempfile
import subprocess
from braceexpand import braceexpand
import google.protobuf.descriptor_pb2 as descriptor

protoc = os.environ.get('PROTOC', None)
if protoc is None:
	print("Error: PROTOC env var should be set to original protoc compiler version >= 3.5.1", file=sys.stderr)

debug = os.environ.get('BUILDENV_PROTOC_DEBUG', '') != ''

gopath = os.environ.get('GOPATH', '').split(':')
if gopath == ['']:
	gopath = []

env_proto_path = os.environ.get('PROTO_PATH', '').split(':')
if env_proto_path == ['']:
	env_proto_path = []

env_proto_path_n = len(env_proto_path)

args = sys.argv[1:]
# first expand @args
expanded_args = []
for arg in args:
	if arg.startswith('@'):
		with open(arg[1:], 'r') as f:
			for line in f.readlines():
				expanded_args.append(line.rstrip('\n').rstrip('\r'))
	else:
		expanded_args.append(arg)

options = []
cmd_proto_path = []
proto_files = []
for i, arg in enumerate(expanded_args):
	if arg.startswith('-'):
		if arg.startswith('-I=') or arg.startswith('--proto_path='):
			cmd_proto_path += [ path for path in arg.split('=', 1)[1].split(':') if path != '' ]
		elif arg.startswith('-I'):
			cmd_proto_path.append(arg[2:].strip())
		elif arg == '-x':
			debug = True
		else:
			options.append(arg)
		continue
	else:
		proto_files = args[i:]
		break

# if no paths were given we assume all proto are relative to cwd
if len(cmd_proto_path) == 0:
	default_cwd_path = [ os.getcwd() ]
else:
	default_cwd_path = []

gopath_proto_path = [ os.path.join(path, "src") for path in gopath if os.path.exists(path) ]

default_google_protobuf_path = [ os.path.join(path, "src/github.com/gogo/protobuf/protobuf") for path in gopath if os.path.exists(path) ]

if debug:
	print("+ cmd_proto_path:", cmd_proto_path, file=sys.stderr)
	print("+ default_cwd_path:", default_cwd_path, file=sys.stderr)
	print("+ env_proto_path:", env_proto_path, file=sys.stderr)
	print("+ gopath_proto_path:", gopath_proto_path, file=sys.stderr)
	print("+ default_google_protobuf_path:", default_google_protobuf_path, file=sys.stderr)

# function 3: add search paths
proto_search_path = cmd_proto_path + default_cwd_path + env_proto_path + gopath_proto_path + default_google_protobuf_path

def include_paths(this_run_cmd_proto_path):
	global env_proto_path, gopath_proto_path, default_google_protobuf_path
	paths = list(this_run_cmd_proto_path)
	if len(paths) == 0:
		paths += [ "." ]
	paths += env_proto_path + gopath_proto_path + default_google_protobuf_path
	return [ "-I{}".format(path) for i, path in enumerate(paths) if path not in paths[:i] ]

# function 1: glob and braces expansion for proto files
def expand_glob_and_braces(proto_files):
	expanded_proto_files = []
	for glob_braces_proto_file in proto_files:
		glob_expanded_proto_files = glob.glob(glob_braces_proto_file)
		if 0 == len(glob_expanded_proto_files):
			glob_expanded_proto_files = [glob_braces_proto_file]
		for braces_proto_file in glob_expanded_proto_files:
			braces_expanded_proto_files = braceexpand(braces_proto_file)
			expanded_proto_files += braces_expanded_proto_files
	return expanded_proto_files

expanded_proto_files = expand_glob_and_braces(proto_files)

if len(expanded_proto_files) == 0:
	os.execvp(protoc, ["protoc"] + args)
	exit(1)

# function 2: help gogo compiler to associate imported proto files with corresponding go packages
# by providing a list of substitutions imported_proto->go_package
def get_fds(proto_files, this_run_cmd_proto_path):
	global protoc, debug
	with tempfile.NamedTemporaryFile(mode='rb', delete=False) as fds_file:
		exec_args = [protoc] + include_paths(this_run_cmd_proto_path) + \
			["--descriptor_set_out={}".format(fds_file.name)] + \
			proto_files

		if debug:
			print("+ get_fds() execute: ", exec_args, file=sys.stderr)

		try:
			subprocess.check_call(exec_args)
		except subprocess.CalledProcessError:
			return None
		fds_body = fds_file.read()
		ret = descriptor.FileDescriptorSet()
		ret.ParseFromString(fds_body)
		return ret

# try all proto_path in a search for test
def find_full_path(test):
	global proto_search_path, debug
	for path in proto_search_path:
		full_path = os.path.join(path, test)
		if os.path.exists(full_path):
			if debug:
				print("+ found {} in {}".format(test, path), file=sys.stderr)
			return full_path, path
	if debug:
		print("+ not found {} in {}".format(test, proto_search_path), file=sys.stderr)
	return None, None

if len(gopath) > 0 and any(option.startswith('--gogo_out=') for option in options):

	default_substitutions = {
		# some proto files from google, a part of protobuf distribution
		'google/protobuf/any.proto':                 'github.com/gogo/protobuf/types',
		'google/protobuf/api.proto':                 'github.com/gogo/protobuf/types',
		'google/protobuf/duration.proto':            'github.com/gogo/protobuf/types',
		'google/protobuf/empty.proto':               'github.com/gogo/protobuf/types',
		'google/protobuf/field_mask.proto':          'github.com/gogo/protobuf/types',
		'google/protobuf/source_context.proto':      'github.com/gogo/protobuf/types',
		'google/protobuf/struct.proto':              'github.com/gogo/protobuf/types',
		'google/protobuf/timestamp.proto':           'github.com/gogo/protobuf/types',
		'google/protobuf/type.proto':                'github.com/gogo/protobuf/types',
		'google/protobuf/wrappers.proto':            'github.com/gogo/protobuf/types',
		'google/protobuf/descriptor.proto':          'github.com/gogo/protobuf/protoc-gen-gogo/descriptor',
		'google/protobuf/compiler/plugin.proto':     'github.com/gogo/protobuf/protoc-gen-gogo/plugin',
	}

	substitutions = {}

	fds = get_fds(expanded_proto_files, cmd_proto_path)

	if fds is not None:

		for fdp in fds.file:
			go_package = fdp.options.go_package
			this_proto_full_path, _ = find_full_path(fdp.name)

			assert this_proto_full_path is not None

			for dep in fdp.dependency:
				dep_full_path, include_path = find_full_path(dep)
				if dep_full_path is not None:

					# now we need to sneak into go_package option in each dependancy
					dep_fds = get_fds([dep], [include_path] + cmd_proto_path)
					assert dep_fds is not None
					assert len(dep_fds.file) == 1
					dep_fdp = dep_fds.file[0]
					dep_go_package = dep_fdp.options.go_package
					if '/' in dep_go_package:
						# the go package was specified explicitly, no need to help gogo generator
						if debug:
							print("+ no substitution for {}, go_package is {}".format(dep, dep_go_package), file=sys.stderr)
						continue

					# do nothing for neighbour proto files
					if os.path.dirname(this_proto_full_path) == os.path.dirname(dep_full_path):
						continue

					# finally find corresponding go package which dependancy proto file belongs to
					for gopath_src in gopath_proto_path:
						if dep_full_path.startswith(gopath_src):
							substitutions[dep] = os.path.dirname(dep_full_path[len(gopath_src) + 1:])
							break

		substitutions.update(default_substitutions)

		if debug:
			print("+ substitutions: ", sorted(substitutions.items()), file=sys.stderr)
			for k, v in sorted(substitutions.items()):
				print("+     {} -> {}".format(k, v), file=sys.stderr)

		for i, option in enumerate(options):
			if option.startswith('--gogo_out='):
				arg = option.split('=', 1)[1]
				substitutions_list = ",".join( "M{}={}".format(k, v) for k, v in sorted(substitutions.items()) )
				if ':' in arg:
					# there are some gogo options already given
					option = '--gogo_out={},{}'.format(substitutions_list, arg)
				else:
					# no gogo options given
					option = '--gogo_out={}:{}'.format(substitutions_list, arg)
				options[i] = option

exec_args = ["protoc"] + include_paths(cmd_proto_path) + options + expanded_proto_files

if debug:
	print("+ final execute: ", exec_args, file=sys.stderr)

os.execvp(protoc, exec_args)
exit(1)
